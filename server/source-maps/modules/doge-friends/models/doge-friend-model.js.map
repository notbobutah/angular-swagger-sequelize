{"version":3,"sources":["modules/card/models/card-friend-model.ts"],"names":[],"mappings":";AAAA,IAAO,YAAY,WAAW,6BAA6B,CAAC,CAAC;AAC7D,IAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AAExC,IAAI,EAAE,GAAG,YAAY,EAAE,CAAC;AAOxB,IAAI,cAAc,GAAG,EAAE,CAAC,MAAM,CAAuC,YAAY,EAAO;IACpF,YAAY,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE;IAChF,SAAS,EAAE;QACP,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;SACf;KACJ;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;SACf;KACJ;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;SAChB;KACJ;IACD,UAAU,EAAE;QACR,IAAI,EAAE,SAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,CAAC;SACT;KACJ;CACJ,CAAC,CAAC;AAEH,cAAc,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;IAE5C,IAAI,KAAK,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,EACvE,WAAW,GAAG,CAAC,mBAAmB,EAAE,0BAA0B,EAAE,aAAa,EAAE,0BAA0B,EAAE,qBAAqB,CAAC,EACjI,UAAU,GAAG;QACT,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3D,CAAC,EACD,YAAY,GAAG;QACX,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC;IAGN,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;QAE1B,KAAK,CAAC,MAAM,CAAC;YACT,SAAS,EAAE,UAAU,EAAE,GAAC,CAAC;YACzB,QAAQ,EAAE,UAAU,EAAE,GAAC,CAAC;YACxB,kBAAkB,EAAE,YAAY,EAAE;YAClC,UAAU,EAAE,CAAC;SAChB,CAAC,CAAC;QAEH,KAAK,CAAC,MAAM,CAAC;YACT,SAAS,EAAE,UAAU,EAAE,GAAC,CAAC;YACzB,QAAQ,EAAE,UAAU,EAAE,GAAC,CAAC;YACxB,kBAAkB,EAAE,YAAY,EAAE;YAClC,UAAU,EAAE,CAAC;SAChB,CAAC,CAAC;IACP,CAAC;AAEL,CAAC,CAAC,CAAC;AAEQ,aAAK,GAAG,cAAc,CAAC","file":"../../../../modules/card/models/card-friend-model.js","sourcesContent":["import dbConnection = require('../../../core/db-connection');\nimport Sequelize = require('sequelize');\n\nvar db = dbConnection();\n\n\nexport interface IcardInstance extends Sequelize.Instance<IcardInstance, App.Icard>, App.Icard { }\nexport interface IcardModel extends Sequelize.Model<IcardInstance, App.Icard> { }\n\n\nvar sequalizeModel = db.define<IcardInstance, App.Icard>('card', <any>{\n    idcard: { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },\n    firstName: {\n        type: Sequelize.STRING,\n        allowNull: false,\n        validate: {\n            len: [2, 30]\n        }\n    },\n    lastName: {\n        type: Sequelize.STRING,\n        allowNull: false,\n        validate: {\n            len: [2, 30]\n        }\n    },\n    favoritecardPhrase: {\n        type: Sequelize.STRING,\n        allowNull: false,\n        validate: {\n            len: [1, 200]\n        }\n    },\n    reputation: {\n        type: Sequelize.INTEGER,\n        validate: {\n            min: 1,\n            max: 5\n        }\n    }\n});\n\nsequalizeModel.sync({ force: true }).then((model) => {\n\n    var names = ['Bailey', 'Lucy', 'Charlie', 'Rocky', 'Cooper', 'Sam', 'Zeus'],\n        cardPhrases = ['Such Wow Angular2', 'Amaz app with Typescript', 'Much NodeJs', 'Such amaze Sequalize ORM', 'Such wow PostgreSQL'],\n        randomName = () => {\n            return names[Math.floor(Math.random() * names.length)];\n        },\n        randomPhrase = () => {\n            return cardPhrases[Math.floor(Math.random() * cardPhrases.length)];\n        };\n\n\n    for (var i = 0; i < 20; i++) {\n        \n        model.create({\n            firstName: randomName()+i,\n            lastName: randomName()+i,\n            favoritecardPhrase: randomPhrase(),\n            reputation: 5\n        });\n\n        model.create({\n            firstName: randomName()+i,\n            lastName: randomName()+i,\n            favoritecardPhrase: randomPhrase(),\n            reputation: 4\n        });\n    }\n    \n});\n\nexport var Model = sequalizeModel;"]}